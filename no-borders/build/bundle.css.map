{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Cell.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import Cell from \"./Cell.svelte\";\r\n  import { cellCount, width, height } from \"./cellsStore.js\";\r\n</script>\r\n\r\n<style>\r\n  .board {\r\n    display: grid;\r\n    \r\n  }\r\n</style>\r\n\r\n<main>\r\n  <div class=\"board\" style={`grid-template-columns: repeat(${$width}, 8px); grid-template-rows: repeat(${$height}, 8px)`}>\r\n  {#each Array($cellCount).fill(null) as _, idx}\r\n        <Cell index={idx} />\r\n  {/each}\r\n  </div>\r\n</main>\r\n",
    "<script>\r\n  import { cellStores, surroundingStores, width } from \"./cellsStore\";\r\n\r\n  export let index;\r\n  $: me = cellStores[index];\r\n  $: surroundings = surroundingStores[index];\r\n\r\n  $: isMine = $me.isMine;\r\n  $: stateKnown = $me.stateKnown;\r\n  $: createsConstraint = stateKnown && !isMine;\r\n\r\n  $: unknownCellsCount = $surroundings.filter(cell => !cell.stateKnown).length;\r\n  $: adjacentMinesCount = $surroundings.filter(cell => cell.isMine).length;\r\n  $: knownMinesCount = $surroundings.filter(\r\n    cell => cell.isMine && cell.stateKnown\r\n  ).length;\r\n  $: remainingMinesCount = adjacentMinesCount - knownMinesCount;\r\n\r\n  $: clearable = createsConstraint && adjacentMinesCount === knownMinesCount;\r\n  $: flaggable = createsConstraint && remainingMinesCount === unknownCellsCount;\r\n\r\n  $: if (clearable) setTimeout(() => surroundings.reveal(), 0);\r\n  $: if (flaggable) setTimeout(() => surroundings.reveal(), 0);\r\n\r\n  let textColor;\r\n  $: if (!stateKnown) {\r\n    textColor = \"transparent\";\r\n  } else if (isMine) {\r\n    textColor = \"white\";\r\n  } else {\r\n    textColor = [\r\n      \"transparent\",\r\n      \"blue\",\r\n      \"green\",\r\n      \"red\",\r\n      \"purple\",\r\n      \"maroon\",\r\n      \"#0aa\",\r\n      \"black\",\r\n      \"#444\"\r\n    ][adjacentMinesCount];\r\n  }\r\n\r\n  $: x = Math.floor(index / $width);\r\n  $: y = index % $width;\r\n  $: light = (x + y) % 2 === 0;\r\n  function getBackgroundColor(stateKnown, isMine, light) {\r\n    if (stateKnown && isMine) return \"#f55\";\r\n    if (stateKnown && !isMine && light) return \"#fff\";\r\n    if (stateKnown && !isMine && !light) return \"#ddd\";\r\n    if (!stateKnown && light) return \"#aaa\";\r\n    if (!stateKnown && !light) return \"#999\";\r\n  }\r\n  $: backgroundColor = getBackgroundColor(stateKnown, isMine, light);\r\n\r\n  $: cellText = isMine ? \"X\" : adjacentMinesCount;\r\n</script>\r\n\r\n<style>\r\n  .cell {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 5pt;\r\n    font-weight: 700;\r\n    height: 8px;\r\n    width: 8px;\r\n  }\r\n</style>\r\n\r\n<div\r\n  class=\"cell\"\r\n  style=\"color: {textColor}; background-color: {backgroundColor}\">\r\n  {cellText}\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AAME,MAAM,eAAC,CAAC,AACN,OAAO,CAAE,IAAI,AAEf,CAAC;ACkDD,KAAK,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,GAAG,CACX,KAAK,CAAE,GAAG,AACZ,CAAC"
}